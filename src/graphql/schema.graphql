type Query {
  publicBots: [Bot]
}
type Mutation {
  addBot(input: BotInput): Bot
  sendMessage(input: MessageInput): Message
  createConversation(input: ConversationInput): Conversation
}

input ConversationInput {
  botId: ID!
  userId: ID!
}

input MessageInput {
  from: String!
  text: String!
  timestamp: String!
}

input BotInput {
  endpoint: String!
  username: String!
  personName: String!
  services: [ServiceInput!]!
}

input ServiceInput {
  name: String!
}

type Bot @node(labels: ["App_Bot"]) {
  id: ID! @id
  endpoint: String!
  name: String!
  services: [Service!]! @relationship(type: "HAS_SERVICE", direction: OUT)
  conversations: [Conversation!]! @relationship(type: "PART_OF", direction: OUT)
  registeredBy: User! @relationship(type: "REGISTERED_BY", direction: OUT)
}

type Service @node(labels: ["App_Service"]) {
  id: ID! @id
  name: String!
  bots: [Bot!]! @relationship(type: "HAS_SERVICE", direction: IN)
}

type EvaluationItem @node(labels: ["App_EvaluationItem"]) {
  id: ID
  question: String
  originalAnswer: String
  originalVector: [Float]
  emsAnswers: [String]
  distances: [Float]
}

type User @node(labels: ["App_User"]) {
  id: ID! @id
  name: String!
  email: String! @unique @auth(requires: OWNER)
  apiKey: String! @unique
  image: String! @default(value: "https://api.adorable.io/avatars/285/1.png")
  bots: [Bot!]! @relationship(type: "HAS_BOT", direction: OUT)
  conversations: [Conversation!]! @relationship(type: "PART_OF", direction: OUT)
  ownedConversations: [Conversation!]! @relationship(type: "OWNED_BY", direction: IN)
}

type Emulee @node(labels: ["App_Emulee"]) {
  name: String! @unique
  bot: Bot! @relationship(type: "EMULATES", direction: OUT)
}

type Conversation @node(labels: ["App_Conversation"]) {
  id: ID! @id
  messages: [Message!]! @relationship(type: "HAS_MESSAGE", direction: OUT)
  bots: [Bot!]! @relationship(type: "PART_OF", direction: IN)
  users: [User!]! @relationship(type: "PART_OF", direction: IN)
  owner: User! @relationship(type: "OWNED_BY", direction: OUT)
  service: Service @relationship(type: "HOSTED_ON", direction: OUT)
}

union Tag_Recipient = Bot | User

type Message @node(labels: ["App_Message"]) {
  id: ID! @id
  from: String!
  tagged: [Tag_Recipient!]! @relationship(type: "TAGGED", direction: OUT)
  text: String!
  timestamp: String!
}
