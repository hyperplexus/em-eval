type Bot @node(labels: ["App_Bot"]) {
  id: ID! @id
  endpoint: String!
  username: String!
  personName: String!
  services: [Service!]! @relationship(type: "HAS_SERVICE", direction: OUT)
  conversations: [Conversation!]! @relationship(type: "PART_OF", direction: OUT)
}

type Service @node(labels: ["App_Service"]) {
  id: ID! @id
  name: String!
  bots: [Bot!]! @relationship(type: "HAS_SERVICE", direction: IN)
  users: [User!]! @relationship(type: "HAS_USER", direction: OUT)
}

type User @node(labels: ["App_User"]) {
  id: ID! @id
  username: String!
  service: Service @relationship(type: "HAS_USER", direction: IN)
}
type Bot @node(labels: ["App_Bot"]) {
  id: ID! @id
  endpoint: String!
  username: String!
  emulee: Emulee! @relationship(type: "EMULATES", direction: OUT)
  emuleeName: String! @customResolver(requires: "emulee { name}")
  services: [Service!]! @relationship(type: "HAS_SERVICE", direction: OUT)
  conversations: [Conversation!]! @relationship(type: "PART_OF", direction: OUT)
}

type ApiUser @node(labels: ["App_ApiUser"]) {
  id: ID! @id
  email: String! @unique
  apiKey: String! @unique
  bots: [Bot!]! @relationship(type: "REGISTERED_BY", direction: IN)
}

type Bot @node(labels: ["App_Bot"]) {
  id: ID! @id
  endpoint: String!
  username: String!
  personName: String!
  services: [Service!]! @relationship(type: "HAS_SERVICE", direction: OUT)
  conversations: [Conversation!]! @relationship(type: "PART_OF", direction: OUT)
  registeredBy: ApiUser! @relationship(type: "REGISTERED_BY", direction: OUT)
}

type Emulee @node(labels: ["App_Emulee"]) {
  name: String! @unique
}

type Conversation @node(labels: ["App_Conversation"]) {
  id: ID! @id
  messages: [Message!]! @relationship(type: "HAS_MESSAGE", direction: OUT)
  bots: [Bot!]! @relationship(type: "PART_OF", direction: IN)
  service: Service @relationship(type: "HOSTED_ON", direction: OUT)
}

union Tag_Recipient = Bot | User

type Message @node(labels: ["App_Message"]) {
  id: ID! @id
  from: String!
  tagged: [Tag_Recipient!]! @relationship(type: "TAGGED", direction: OUT)
  text: String!
  timestamp: String!
}
